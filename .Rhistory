canonicForm(markovB)
E <- matrix(c(0, 1, 0, 0, 0.5, 0, 0.5, 0, 0, 0.5, 0, 0.5, 0, 0, 1, 0),
nrow = 4, ncol = 4, byrow = TRUE)
E
mcE <- new("markovchain", states = c("a", "b", "c", "d"),
transitionMatrix = E,
name = "E")
mcE
is.irreducible(mcE)
period(mcE)
?period
markovchainFit
markovchainFit()
goldSign <- vector(length=length(goldDiff))
data(gold)
library(forecast)
install.packages('forecast')
library(forecast)
data(gold)
gold1 <- gold
for(i in 1:length(gold)){
gold1[i] <- ifelse(is.na(gold[i]),gold[i-1],gold[i])
gold1[i] <- ifelse(is.na(gold1[i]),gold1[i-1],gold1[i])
}
goldDiff <- diff(gold1)
goldSign <- vector(length=length(goldDiff))
for (i in 1:length(goldDiff)){
goldSign[i] <- ifelse(goldDiff[i] > 0, "POS","NEG")
}
goldSign
goldMC <- markovchainFit(data = goldSign, method="mle", name = "gold mle")
goldMC$estimate
data(holson)
holson[,2:12]
singleMc <- markovchainFit(data = holson[,2:12])
singleMc
mclistFit <- markovchainListFit(data = holson[, 2:12], name = "holsonMcList")
mclistFit
statesNames <- c("a", "b", "c")
mcB <- new("markovchain", states = statesNames,
transitionMatrix = matrix(c(0.2, 0.5, 0.3, 0, 0.2, 0.8, 0.1, 0.8, 0.1),
nrow = 3, byrow = TRUE, dimnames = list(statesNames, statesNames)))
mcB
outs <- markovchainSequence(n = 100, markovchain = mcB, t0 = "a")
outs
outs <- markovchainSequence(n = 100, markovchain = mcB, t0 = c('a','b','c')
)
outs <- markovchainSequence(n = 100, markovchain = mcB, t0 = c('a','b','c'))
outs
remove(outs)
outs <- markovchainSequence(n = 100, markovchain = mcB, t0 = c('a','b','c'))
outs
remove(outs)
View(holson)
View(holson)
data=matrix(c(0,0,0,0,0,0,0,0,0),3,3)
mclistFit <- markovchainListFit(data = data, name = "holsonMcList")
mclistFit
data=matrix(c(0,1,0,1,1,0,0,0,0),3,3)
mclistFit <- markovchainListFit(data = data, name = "holsonMcList")
mclistFit
data
data=matrix(c(0,1,0,1,1,0,0,0,0,2,3,1),4,3)
data
mclistFit <- markovchainListFit(data = data, name = "holsonMcList")
mclistFit
data=matrix(c(0,1,0,1,1,0,0,0,0,2,3,1),3,4)
data
mclistFit <- markovchainListFit(data = data, name = "holsonMcList")
mclistFit
data=matrix(c(0,1,0,1,1,0,0,5,0,2,3,1),3,4)
data
mclistFit <- markovchainListFit(data = data, name = "holsonMcList")
mclistFit
data
mclistFit
View(holson)
View(holson)
holson[,2:12]
mclistFit
data
predict(mclistFit,c(0,1,0))
predict(object = mclistFit,1,1)
?predict
predict(object = mclistFit,c(0,0,0))
predict(object = mclistFit$estimate,c(0,0,0))
mclistFit$estimate
predict(object = mclistFit$estimate,2
)
predict(object = mclistFit$estimate,c(1,2))
predict(object = mclistFit$estimate,c(1,2,3))
predict(object = mclistFit$estimate,c(18,8,8))
predict(object = mclistFit$estimate,c(8,8,8))
predict(object = mclistFit$estimate,c(5,5,5))
data=matrix(c(0,1,0,1,1,0,0,5,0,2,3,1),2,6)
mclistFit <- markovchainListFit(data = data, name = "holsonMcList")
predict(object = mclistFit$estimate,c(5,5,5))
predict(object = mclistFit$estimate,c(5,5,5,5))
mulistFit
mclistFit
predict(object = mclistFit$estimate,3)
predict(object = mclistFit$estimate,c(3,1)
)
predict(object = mclistFit$estimate,c(3,1,3,4))
predict(object = mclistFit$estimate,c(3,1,3,))
predict(object = mclistFit$estimate,c(3,1,))
predict(object = mclistFit$estimate,c(3,1))
predict(object = mclistFit$estimate,c(3,1,1,1,1,1))
predict(object = mclistFit$estimate,c(3,1,1,1,1))
predict(object = mclistFit$estimate,c(3,1,1,1,2))
predict(object = mclistFit$estimate,data)
data
predict(object = mclistFit$estimate,data[,:5])
predict(object = mclistFit$estimate,data[,1:5])
predict(object = mclistFit$estimate,)
data[,1:5]
install.packages("drat", repos = "https://cran.rstudio.com")
drat:::addRepo("dmlc")
install.packages("xgboost", repos="http://dmlc.ml/drat/", type ="source" )
require(xgboost)
require(xgboost)
set.seed(2)
set.seed(1)
data(agaricus.train, package = "xgboost")
data(agaricus.test, package = "xgboost")
train = agaricus.train
test = agaricus.test
param = list('objective' = 'binary:logistic',
'eval_metric' = 'logloss',
'eta' = 1, 'max.depth' = 2)
bst.cv =xgb.cv(params = param, data = as.matrix(train$data), label = train$label,
nfold=10,nrounds = 80)
plot(log(bst.cv$test.logloss.mean),type = 'l')
bst = xgboost(data = as.matrix(train$data), label = train$label, max.depth = 2, eta = 1, nrounds = 5,
plot(log(bst.cv$test.logloss.mean),type = 'l')
plot(log(bst.cv$test.logloss.mean),type = 'l')
plot(log(bst.cv$test.logloss.mean),type = 'l')
bst = xgboost(data = as.matrix(train$data), label = train$label, max.depth = 2, eta = 1, nrounds = 5,
nthread = 2, objective = 'binary:logistic')
preds = predict(bst,test$data)
head(preds)
trees = xgb.model.dt.tree(dimnames(train$data)[[2]],model = bst)
View(trees)
names = dimnames(train$data)[[2]]
importance_matrix = xgb.importance(names, model = bst)
xgb.plot.importance(importance_matrix[1:10,])
xgb.plot.tree(feature_names = names, model = bst, n_first_tree = 2)
xgb.plot.tree(feature_names = names, model = bst, n_first_tree = 2)
install.packages("DiagrammeR")
library(DiagrammeR)
library(DiagrammeR)
xgb.plot.tree(feature_names = names, model = bst, n_first_tree = 2)
plot(log(bst.cv$test.logloss.mean),type = 'l')
getwd()
read.csv("/Users/liwenyu/Documents/intern water/B118 CA DWR GW_Master.xlsx")
water = read.csv("/Users/liwenyu/Documents/intern water/B118 CA DWR GW_Master.xlsx")
water = read.csv("/Users/liwenyu/Documents/B118 CA DWR GW_Master.csv")
View(water)
water1 = read.csv("/Users/liwenyu/Documents/B118 CA DWR GW_Master.csv")
water[1,1]
water1[2, 2]
water = water1[,c(1,2,3,13,19,20)]
View(water)
table(water[, 3])
View(water)
View(water1)
water = water1[,c(1,2,3,10,13,19,20)]
View(water)
water$Msmt_Date = as.Date(water$Msmt_Date,
format = "%B %d %Y")
water = water1[,c(1,2,3,10,13,19,20)]
water$Msmt_Date = as.Date(water$Msmt_Date,
format = "%B %d,%Y")
source("...\\plot.field.points.R")
load("...\\PM25.RData")
locat = cbind(water$Longitude, water$Latitude)
View(locat)
water = water[water$Measurement.Type=Depth,]
water = water[water$Measurement.Type==Depth,]
water = water[water$Measurement.Type=="Depth", ]
names(locat) = c(long, lat)
names(locat) = c("long", "lat")
View(locat)
locat = cbind(water$Longitude, water$Latitude)
names(locat) = c("long", "lat")
View(locat)
library(sp)
library(gstat)
install.packages("gstat")
library(gstat)
suppressPackageStartupMessages({
library(dplyr) # for "glimpse"
library(ggplot2)
library(scales) # for "comma"
library(magrittr)
})
View(water)
water %>% as.data.frame %>%
ggplot(aes(x, y)) + geom_point(aes(size=DGBS), color="blue", alpha=3/4) +
ggtitle("Depth Concentration") + coord_equal() + theme_bw()
water %>% as.data.frame %>%
ggplot(aes(Latitude, Longitude)) + geom_point(aes(size=DGBS), color="blue", alpha=3/4) +
ggtitle("Depth Concentration") + coord_equal() + theme_bw()
water_spr = water[water$Season = "Spring",]
water_spr = water[water$Season == "Spring",]
water_fal = water[water$Season =="Fall",]
ggplot(aes(Latitude, Longitude)) + geom_point(aes(size=DGBS), color=c("blue","red","green"), alpha=3/4) +
water %>% as.data.frame %>%
ggplot(aes(Latitude, Longitude)) + geom_point(aes(size=DGBS), color=c("blue","red","green"), alpha=3/4) +
ggtitle("Depth Concentration") + coord_equal() + theme_bw()
water %>% as.data.frame %>%
ggplot(aes(Latitude, Longitude)) + geom_point(aes(size=DGBS), color=c("blue","red","green"), alpha=3/4) +
ggtitle("Depth Concentration") + coord_equal() + theme_bw()
?ggplot
ggplot(aes(Latitude, Longitude)) + geom_point(aes(size=DGBS), color="red", alpha=3/4) +
water %>% as.data.frame %>%
ggplot(aes(Latitude, Longitude)) + geom_point(aes(size=DGBS), color="red", alpha=3/4) +
ggtitle("Depth Concentration") + coord_equal() + theme_bw()
water %>% as.data.frame %>%
ggplot(aes(Latitude, Longitude)) + geom_point(aes(size=DGBS), color="red", alpha=3/4) +
ggtitle("Depth Concentration") + coord_equal() + theme_bw()
water %>% as.data.frame %>%
ggplot(aes(Latitude, Longitude)) + geom_point(aes(size=DGBS), color=c("green","red","blue"), alpha=3/4) +
ggtitle("Depth Concentration") + coord_equal() + theme_bw()
water %>% as.data.frame %>%
ggplot(aes(Latitude, Longitude)) + geom_point(aes(size=DGBS), color=rainbow(3), alpha=3/4) +
ggtitle("Depth Concentration") + coord_equal() + theme_bw()
water %>% as.data.frame %>%
ggplot(aes(Latitude, Longitude)) + geom_point(aes(size=DGBS), scale_colour_gradientn(colours=rainbow(4)), alpha=3/4) +
ggtitle("Depth Concentration") + coord_equal() + theme_bw()
water %>% as.data.frame %>%
ggplot(aes(Latitude, Longitude)) + geom_point(aes(size=DGBS), scale_colour_gradientn(colours=rainbow(3)), alpha=3/4) +
ggtitle("Depth Concentration") + coord_equal() + theme_bw()
water %>% as.data.frame %>%
ggplot(aes(Latitude, Longitude)) + geom_point(aes(size=DGBS), color="green", alpha=3/4) +
ggtitle("Depth Concentration") + coord_equal() + theme_bw()
water %>% as.data.frame %>%
ggplot(aes(Latitude, Longitude)) + geom_point(aes(color=water$DGBS), alpha=3/4) +
scale_colour_gradientn(colours=rainbow(3))
ggtitle("Depth Concentration") + coord_equal() + theme_bw()
water %>% as.data.frame %>%
ggplot(aes(Latitude, Longitude)) + geom_point(aes(color=water$DGBS), alpha=3/4) +
ggtitle("Depth Concentration") + coord_equal() + theme_bw()
water %>% as.data.frame %>%
ggplot(aes(Latitude, Longitude)) + geom_point(aes(color=water$DGBS), alpha=1/1000) +
ggtitle("Depth Concentration") + coord_equal() + theme_bw()
water %>% as.data.frame %>%
ggplot(aes(Latitude, Longitude)) + geom_point(aes(color=water$DGBS), alpha=1/100) +
ggtitle("Depth Concentration") + coord_equal() + theme_bw()
water_spr_2011 = water[water$Season == "Spring" & water$Year == 2011,]
water_spr_2011 = water[water$Season == "Spring",]
water_spr = water[water$Season == "Spring",]
water_spr_2011 = water_spr[water_spr$Year==2011,]
water_spr = water[water$Season == "Spring ",]
water_spr_2011 = water_spr[water_spr$Year==2011,]
water_spr_2011 %>% as.data.frame %>%
ggplot(aes(Latitude, Longitude)) + geom_point(aes(color=water$DGBS), alpha=1/100) +
ggtitle("Depth Concentration") + coord_equal() + theme_bw()
View(water_spr_2011)
water_spr_2011 %>% as.data.frame %>%
ggplot(aes(Latitude, Longitude)) + geom_point(aes(color=water_spr_2011$DGBS), alpha=1/100) +
ggtitle("Depth Concentration") + coord_equal() + theme_bw()
water_spr_2011 %>% as.data.frame %>%
ggplot(aes(Latitude, Longitude)) + geom_point(aes(color=water_spr_2011$DGBS), alpha=1/50) +
ggtitle("Depth Concentration") + coord_equal() + theme_bw()
water_spr_2011 %>% as.data.frame %>%
ggplot(aes(Latitude, Longitude)) + geom_point(aes(color=water_spr_2011$DGBS), alpha=3/4) +
ggtitle("Depth Concentration") + coord_equal() + theme_bw()
water_spr_2011 %>% as.data.frame %>%
ggplot(aes(Latitude, Longitude)) + geom_point(aes(color=water_spr_2011$DGBS), alpha=2/50) +
ggtitle("Depth Concentration") + coord_equal() + theme_bw()
water_spr_2011 %>% as.data.frame %>%
ggplot(aes(Latitude, Longitude)) + geom_point(aes(color=water_spr_2011$DGBS), alpha=3/7) +
ggtitle("Depth Concentration") + coord_equal() + theme_bw()
water_spr_2011 %>% as.data.frame %>%
ggplot(aes(Latitude, Longitude)) + geom_point(aes(color=water_spr_2011$DGBS), alpha=3/10) +
ggtitle("Depth Concentration") + coord_equal() + theme_bw()
class(water_spr_2011)
str(water_spr_2011)
library(MASS)
library(MASS)
accident ＝ data.frame(expand.grid(I=factor(c("nonfatal","fatal")),E=factor(c("yes","no")),S=factor(c("seatbelted","non-seatbelt"))),count=c(1105,411111,4624,157342,14,483,497,1008))
accident = data.frame(expand.grid(I=factor(c("nonfatal","fatal")),E=factor(c("yes","no")),S=factor(c("seatbelted","non-seatbelt"))),count=c(1105,411111,4624,157342,14,483,497,1008))
fit1=loglm(count~S + E + I,data=accident,param=T)
fit2=loglm(count~S + E + I + S:I ,data=accident,param=T)
fit3=loglm(count~S + E + I + E:I ,data=accident,param=T)
fit4=loglm(count~S + E + I + S:E ,data=accident,param=T)
fit5=loglm(count~S + E + I + S:I + E:I ,data=accident,param=T)
fit6=loglm(count~S + E + I + S:E + E:I ,data=accident,param=T)
fit7=loglm(count~S + E + I + S:E + S:I ,data=accident,param=T)
fit8=loglm(count~S + E + I + S:E + S:I + E:I ,data=accident,param=T)
fit1
fit1;fit2
fit1;fit2;fit3;fit4;fit5;fit6;fit7;fit8
accident1=data.frame(expand.grid(I=factor(c("0","1")), E=factor(c("1","0")),S=factor(c("1","0"))),count=c(1105,14,411111,483,4624,497,157342,1008))
accident1 <- accident1[rep(row.names(accident1), accident1$count), 1:3]
fit=glm(formula = I ~ S + E, data=accident1,family=binomial(link=logit))
summary(fit)
a = c(1105,411111,4624,157742,14,483,497,1008)
b = c(1115.11194,410163.8819,5103.206653,157799.7995,3.888060064,1430.118136,17.79334726,550.2004568)
delta = sum(abs(a-b))/(2*sum(a))
delta
data = matrix(c( 17, 1, 9, 0, 24, 1, 17, 1, 15, 1, 11, 1, 10, 1, 15, 0, 16, 1, 17, 1, 13, 1, 7, 0, 14, 1, 12, 1, 10, 1, 19, 1, 13, 1, 14, 1, 8, 1, 14, 1, 8, 1, 16, 1, 23, 1, 7, 1, 8, 0, 12, 0, 13, 1, 13, 1, 12, 1, 8, 1, 12, 1, 9, 0, 10, 1, 5, 1, 6, 0,  16, 1, 10, 1, 12, 0, 7, 1, 14, 0, 10, 0, 10, 1, 8, 1, 15, 1, 8, 0, 11, 1, 11, 1, 15, 1, 16, 1, 8, 1, 9, 0, 5, 0, 3, 1, 9, 0, 8, 1,6, 0, 5, 1, 12, 1, 11, 0, 5, 0, 8, 0, 14, 1, 5, 0, 14, 1, 13, 1, 6, 0, 14, 1, 5, 0, 9, 1, 7, 1, 20, 1, 12, 1, 7, 0, 12, 0, 11, 1, 5, 0, 3, 0),ncol = 2, byrow = TRUE)
data = data.frame(data)
colnames(data) = c('a', 'w')
fit = glm(formula = w ~ a, family = binomial(logit), data = data)
summary(fit)
exp(-2.23527+0.29378*3)/(1+exp(-2.23527+0.29378*3)) exp(-2.23527+0.29378*24)/(1+exp(-2.23527+0.29378*24))
```
exp(-2.23527+0.29378*3)/(1+exp(-2.23527+0.29378*3)) exp(-2.23527+0.29378*24)/(1+exp(-2.23527+0.29378*24))
exp(-2.23527+0.29378*3)/(1+exp(-2.23527+0.29378*3))
exp(-2.23527+0.29378*3)/(1+exp(-2.23527+0.29378*3)) exp(-2.23527+0.29378*24)/(1+exp(-2.23527+0.29378*24))
exp(-2.23527+0.29378*3)
exp(-2.23527+0.29378*3)/(1+exp(-2.23527+0.29378*3))
exp(-2.23527+0.29378*24)/(1+exp(-2.23527+0.29378*24))
0.29378-1.96*(0.08325)
0.29378+1.96*(0.08325)
d1 = matrix(c(66,0,70,1,69,0,68,0,67,0,72,0,73,0,70,0,57,1,63,1,70,1,78,0,67,0,53,1,67,0,75,0,70,0,81 ,0,76,0,79,0,75,1,76,0,58,1),ncol = 2, byrow = TRUE)
d1 = data.frame(1)
colnames(1) = c('t','td')
fit1 = glm(formula = td~t,family = binomial(logit),data = d1)
d1 = matrix(c(66,0,70,1,69,0,68,0,67,0,72,0,73,0,70,0,57,1,63,1,70,1,78,0,67,0,53,1,67,0,75,0,70,0,81 ,0,76,0,79,0,75,1,76,0,58,1),ncol = 2, byrow = TRUE)
d1 = data.frame(1)
colnames(d1) = c('t','td')
#a)
d1 = matrix(c(66,0,70,1,69,0,68,0,67,0,72,0,73,0,70,0,57,1,63,1,70,1,78,0,67,0,53,1,67,0,75,0,70,0,81 ,0,76,0,79,0,75,1,76,0,58,1),ncol = 2, byrow = TRUE)
d1 = data.frame(1)
colnames(d1) = c('t','td')
colnames(d1) = c('t','d')
View(d1)
d1 = matrix(c(66,0,70,1,69,0,68,0,67,0,72,0,73,0,70,0,57,1,63,1,70,1,78,0,67,0,53,1,67,0,75,0,70,0,81 ,0,76,0,79,0,75,1,76,0,58,1),ncol = 2, byrow = TRUE)
d1 = data.frame(d1)
colnames(d1) = c('t','d')
d1 = matrix(c(66,0,70,1,69,0,68,0,67,0,72,0,73,0,70,0,57,1,63,1,70,1,78,0,67,0,53,1,67,0,75,0,70,0,81 ,0,76,0,79,0,75,1,76,0,58,1),ncol = 2, byrow = TRUE)
d1 = data.frame(d1)
colnames(d1) = c('t','td')
#a)
fit1 = glm(formula = td~t,family = binomial(logit),data = d1)
summary(fit1)
coef(fit)[1]
b1 = coef(fit)[2]
b1
disaster = data.frame(Ft=c(seq(1,23)),Temp=c(66,70,69,68,67,72,73,70,57,63,70,78,67,53,67,75,70,81,76,79,75,76,58),TD=c(0,1,0,0,0,0,0,0,1,1,1,0,0,1,0,0,0,0,0,0,1,0,1))
model=glm(TD~Temp,data=disaster,family=binomial(link=logit))
b0=coef(model)[1]
b1=coef(model)[2]
b0
b1
b0 = coef(fit1)[1]
b1 = coef(fit1)[2]
b0
b1
prob = function(x){
z = exp(b0-b1*x)/(1+exp(b0-b1*x))
return(z) }
prob(31)
plot curve(estprob5.6,from=53,to=81,xlim=c(50,85),ylim=c(0,1),ylab="probability",xlab="t")
curve(prob,from=53,to=81,xlim=c(50,85),ylim=c(0,1),ylab="probability",xlab="t")
prob = function(x){
z = exp(b0-b1*x)/(1+exp(b0-b1*x))
return(z) }
curve(prob,from=53,to=81,xlim=c(50,85),ylim=c(0,1),ylab="probability",xlab="Ft")
prob = function(x){
z = exp(b0+b1*x)/(1+exp(b0+b1*x))
return(z) }
curve(prob,from=53,to=81,xlim=c(50,85),ylim=c(0,1),ylab="probability",xlab="Ft")
curve(prob,from=53,to=81,xlim=c(50,85),ylim=c(0,1),ylab="probability",xlab="Ft")
prop_raw = d1$td
points(d1$t,prop_raw,pch=19)
pred=predict(fit1,data.frame(t=c(31)),type="response")
pred
se.fit1
pred=predict(fit1,data.frame(t=seq(45,80)),type="response",se.fit=T)
pred$se.fit
-0.2322-1.96*0.1082
-0.2322+1.96*0.1082
c(-0.2322-1.96*0.1082,-0.2322+1.96*0.1082)
c(exp(-0.444272),exp(-0.020128))
d2= matrix(c(12,15,42,52,59,73,82,91,96,105,114,120,121,128,130,139,139,157,1,1,2,8,11,18,22,31 ,37,61,72,81,97,112,118,127,131,140,151,159,177,206,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0 ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),ncol = 2)
d2 = data.frame(d2)
colnames(d2) = c('age','k')
fit2 = glm(formula = k ~ age, family = binomial(logit),data = d2)
summary(fit2)
fit2$coefficients
c(0.004296-1.96*0.005849,0.004296+1.96*0.005849)
age2 = (d2$age)^2
d3 = cbind(d2,age2)
fit3 = glm(formula = k ~ age+age2, family = binomial(logit),data = d2)
summary(fit3)
c(-0.0003279-1.96*0.0001564,-0.0003279+1.96*0.0001564)
prob1 = function(x){
z = exp(-2.0462547+0.0600398*x-0.0003279*x^2)/(1+exp(-2.0462547+0.0600398*x- 0.0003279*x^2))
return(z) }
curve(prob1,from = 1, to = 206, xlim = c(0,210), ylim = c(0,1),ylab="probability",xlab="age" )
curve(prob1,from = 1, to = 206, xlim = c(0,210), ylim = c(0,1),ylab="probability",xlab="age" )
points(k,pch=19)
points(age,pch=19)
curve(prob1,from = 1, to = 206, xlim = c(0,210), ylim = c(0,1),ylab="probability",xlab="age" )
points(age,pch=19)
curve(prob1,from = 1, to = 206, xlim = c(0,210), ylim = c(0,1),ylab="probability",xlab="age" )
points(d2,pch=19)
summary(fit2)
b_0=coef(fit2)[1]
b_1=coef(fit2)[2]
b_0
b_1
b_0=coef(fit2)[1]
b_1=coef(fit2)[2]
prob1=function(x){
z2=exp(b_0+b_1*x)/(1+exp(b_0+b_1*x))
return(z2)
}
curve(prob1,from=0,to=206,ylim=c(0,1),ylab="probability",xlab="Kyphosis")
points(d2,pch=19)
locat = cbind(water_spr_2011$Longitude, water_spr_2011$Latitude)
locat[1]
long = water_spr_2011$Longitude
lat = water_spr_2011$Latitude
coordinates(water_spr_2011) <- ~ lat + long
lat
coordinates(water_spr_2011) <- ~ Latitude + Longitude
class(water_spr_2011)
str(water_spr_2011)
bbox(water_spr_2011)
coordinates(water_spr_2011) %>% glimpse
proj4string(water_spr_2011)
identical( bbox(water_spr_2011), water_spr_2011@bbox )
identical( coordinates(water_spr_2011), water_spr_2011@coords )
water_spr_2011@data %>% glimpse
water_spr_2011 %>% as.data.frame %>% glimpse
depth.vgm <- variogram(log(DGBS)~1, water_spr_2011) # calculates sample variogram values
which(water_spr_2011$DBGS ==NA)
which(water_spr_2011$DBGS =="NA")
View(water_spr_2011)
View(water1)
water1 = read.csv("/Users/liwenyu/Documents/B118 CA DWR GW_Master.csv")
water = water1[,c(1,2,3,10,12,19,20)]
View(water)
water$Msmt_Date = as.Date(water$Msmt_Date,
format = "%B %d,%Y")
water = water[water$Measurement.Type=="Depth", ]
water_spr = water[water$Season == "Spring ",]
water_spr_2011 = water_spr[water_spr$Year==2011,]
water_spr_2011 %>% as.data.frame %>%
ggplot(aes(Latitude, Longitude)) + geom_point(aes(color=water_spr_2011$WSEL), alpha=3/10) +
ggtitle("WSEL Concentration") + coord_equal() + theme_bw()
coordinates(water_spr_2011) <- ~ Latitude + Longitude
class(water_spr_2011)
bbox(water_spr_2011)
coordinates(water_spr_2011) %>% glimpse
water_spr_2011@data %>% glimpse
water_spr_2011 %>% as.data.frame %>% glimpse
depth.vgm <- variogram(log(WSEL)~1, water_spr_2011) # calculates sample variogram values
mdeaths
fdeaths
lungDeaths <- cbind(mdeaths, fdeaths)
lungDeaths
dygraph(lungDeaths)
install.packages("dygraph")
library("dygraph")
install.packages("dygraph")
?dygraph
??dygraph
a = seq(1:20,1)
a = seq(1:20,1)
a = seq(1,20,1)
a
a[-(1:5)]
a[-1]
?ql
??ql
?gl
gl(3, 1, 15)
gl(3, 5
)
gl(2, 8, labels = c("Control", "Treat"))
gl(2, 1, 20)
gl(2, 2, 20)
?factor
factor("a")
getwd()
setwd("/Users/liwenyu/Documents/liwy1113.github.io/")
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
list.files('content', '.Rmd$', full.names = TRUE, recursive = TRUE)
devtools::session_info('blogdown')
Rscript
blogdown::serve_site()
getwd()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
setwd('C:/R/Rapporter/residual_model/')
htmltools::includeHTML
htmltools::includeHTML
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
